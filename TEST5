"""
Matrices:-
|Xnew| = |cos(ang) -sin(ang)|   |X old|
|    |   |                  | Ã— |     |
|Ynew| = |sin(ang) cos(ang) |   |Y old|
"""
import pygame, sys
import numpy as np
from math import *

pygame.init()

WIDTH, HEIGHT, FPS = 720, 800, 60
AVG = min(WIDTH, HEIGHT)
screen = pygame.display.set_mode((WIDTH, HEIGHT))
screen_rect = screen.get_rect()
clock = pygame.time.Clock()

cenX, cenY = WIDTH//2, HEIGHT//2 #360, 400
#cenX-150 is 210 and cenX + 150 is 510 and similar    
colours = {"white": (255, 255, 255),
           "black": (0, 0, 0),
           "gray": (25, 25, 25),
           "l_gray": (150, 150, 150),
           "bg": (25, 25, 75),
           "red": (215, 65, 90),
           "green": (65, 215, 90),
           "d_green": (50, 190, 100),
           "blue": (100, 100, 255)}

Figures = {'square':[(cenX-150, cenY-150), (cenX+150, cenY-150),
          (cenX+150, cenY+150), (cenX-150, cenY+150)],
          
           'triangle':[(cenX, cenY),
           (cenX+150, cenY+150), (cenX-150, cenY+150)],
      
           'pentagon': [(cenX, cenY),
           (cenX+150, cenY+150), (cenX+150, cenY+300),
           (cenX-150, cenY+300),(cenX-150, cenY+150)]    }                   

points = Figures["square"]

def rotate2(angle):
    R = np.array( [[cos(angle), sin(angle)*-1],
                  [sin(angle), cos(angle)]] ).reshape(2, 2)                  
    new_cord = []
    p_arr = []                                       
    for point in points:
        p_arr.append(point)          
    p_arr = np.array(p_arr)
      
    for p in p_arr:
        p.reshape(2, 1) 
        new_cord.append(p @ R)
        
    return new_cord
    
def render2(angle):
    points = rotate2(angle)
        for point_arr in points:
            #print(point_arr)
            pygame.draw.circle(screen, colours['black'], point_arr, 10)
            for i in range(len(points)-1):
                pygame.draw.line(screen, colours["red"], points[i], points[i+1], 5)
                print(i, len(point_arr))
                if i == len(points)-2:
                    pygame.draw.line(screen, colours["red"], points[len(points)-1], points[0], 5) #From the last point in list to first point
                     
angle = 0                      
while True:
    screen.fill(colours["white"])
    #pygame.draw.rect(screen, colours['bg'], (10, 10, 700, 780), 2) # Actual Window
    
    keys = pygame.key.get_pressed()
    for ev in pygame.event.get():
        if ev.type == pygame.QUIT or keys[pygame.K_ESCAPE]:
            pygame.quit()
            sys.exit()
            
    #print(rotate(30))
    angle += 0.5
    rotate2(radians(angle))
    render2(radians(angle))
    #sys.exit()
    #render()
     
    pygame.display.update()
    clock.tick(FPS)
                      




#---------------------
'''Relics of Past:-
def render():
    coordinates = []
    for point in points:
        print(points)
        coordinates.append(point)
        pygame.draw.circle(screen, colours["black"], point, 10)
        for i in range(len(points)-1):
            #print(points[i], points[i+1])   
            pygame.draw.line(screen, colours["red"], points[i], points[i+1], 5)
            if i == len(points)-2:
                pygame.draw.line(screen, colours["red"], points[len(points)-1], points[0], 5) #From the last point in list to first point                
    return np.array((coordinates))  

def rotate(angle):
    rot_matrix = np.array( [[cos(angle), sin(angle)*-1],
                               [sin(angle), cos(angle)]] ).reshape(2, 2)                      
    cord = render() 
    new_cord = []
    for old_xy in cord:
        old_xy.resize(2, 1)
        new_xy = old_xy * rot_matrix
        new_cord.append(new_xy)     
        #print(old_xy)
                                                                                                                                                                                                                                                                                                    
    return new_cord  
    '''
